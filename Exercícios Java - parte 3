//Leia um valor X. Coloque este valor na primeira posição de um vetor N[100]. 
//Em cada posição subsequente de N (1 até 99), coloque a metade do valor armazenado na posição anterior, conforme o exemplo abaixo.
//Imprima o vetor N, com precisão de 4 casas.
import java.io.IOException;
import java.util.Scanner;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;

public class Vetor{
	
    public static void main(String[] args) throws IOException {
        Scanner leitor = new Scanner(System.in);
        double X = leitor.nextDouble();
        BigDecimal[] N = new BigDecimal[100];
        N[0] = new BigDecimal(X);
        BigDecimal divisor = new BigDecimal(2.0000);
        for (        int i = 1; i < 100; i++                                  ) {
         	  N[i] = N[i - 1].divide(divisor);
        } 
        DecimalFormat df = new DecimalFormat("0.0000");
        for (          int i = 0; i < 100; i++                       ) {
             System.out.println("N[" + i + "] = " + df.format(N[i]));
        }
    }
	
}



//Thor também odeia carregar guarda-chuva quando não está chovendo.
//Para evitar isso, ele vai comprar vários guarda-chuvas e deixá-los guardados em casa e no escritório, e só vai usá-los quando estiver chovendo. 
// seja, se estiver chovendo na hora de ir para o trabalho, ele vai pegar um guarda-chuva que está em sua casa, usá-lo no caminho para o trabalho, e deixá-lo lá. 
// maneira semelhante, se estiver chovendo na hora de voltar para casa, ele vai pegar um guarda-chuva que está no escritório, usá-lo no caminho para casa, e deixá-lo lá.
//das as previsões meteorológicas, você terá o desafio de descubrir quantos guarda-chuvas Thor deve comprar e guardar em casa e no escritório, de modo que ele nunca se molhe e nunca precise carregar o guarda-chuva quando não estiver chovendo
//A primeira linha da entrada contém um inteiro N, indicando a quantidade de dias previstos pelo sistema meteorológico (1 <= N <= 1000).
//Em seguida haverá N linhas, cada uma contendo duas palavras SD e SN, indicando a previsão do tempo para a ida e para a volta do trabalho, respectivamente.
//Se a palavra for "sol" significa que neste horário fará sol, e se a palavra for "chuva" significa que neste horário irá chover.



import java.io.IOException;
import java.util.Scanner;

public class Chuva {
	
    public static void main(String[] args) throws IOException {
        Scanner leitor = new Scanner(System.in);
        int N = leitor.nextInt();
        int casaComprado = 0;
        int casaSobrando = 0;
        int trabComprado = 0;
        int trabSobrando = 0;
        for (   int i = 0; i < N; i++             ) {
        	String trabalho = leitor.next();
        	String casa = leitor.next();
        	if (trabalho.equalsIgnoreCase("chuva") && casaSobrando == 0) {
        		casaComprado++;
        		trabSobrando++;
        	} else if (trabalho.equalsIgnoreCase("chuva") && casaSobrando > 0) {
        		trabSobrando++;
        		casaSobrando--;
        	}
        	if (casa.equalsIgnoreCase("chuva") && trabSobrando == 0) {
        		trabComprado++;
        		casaSobrando++;
        	} else if (casa.equalsIgnoreCase("chuva") && trabSobrando > 0) {
        		casaSobrando++;
        		trabSobrando--;
        	}
        }
        System.out.println(casaComprado + " " + trabComprado);
    }
	
}
